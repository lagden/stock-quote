#!/bin/bash

DIR="$( cd -P "$( dirname "$0" )" && pwd )"

# Import functions
. $DIR/_fn

usage() {
	cat <<-EOF

  Usage: $0 [-i] -e <staging|production>

  Options:
    -i   Ignore build image
    -e   Environment
    -h   Show usage

EOF
exit 0
}

# Go to project root
cd $DIR
cd ..

CURR_FOLDER=`pwd`
BUILD=1
# OPT="staging"

while getopts ":ie:" o
do
	case ${o} in
		i) BUILD=0 ;;
		e) [ $OPTARG = "staging" -o $OPTARG = "production" ] && OPT=$OPTARG || usage ;;
		*) usage ;;
	esac
done

if test -z ${OPT}; then
	abort "Missing environment"
fi

# ENV File
load_env $CURR_FOLDER $OPT

if test -z ${DEPLOY_FOLDER}; then
	abort "DEPLOY_FOLDER not found..."
	exit 1
fi

# BUILD IMAGE and PUSH
if test $BUILD == 1; then
	$CURR_FOLDER/bin/image -e $OPT
	test $? -ne 0 && abort "Image build fail" || ok "Image build done"
fi

# Criando docker-compose
COMPOSE_TEMPLATE="${CURR_FOLDER}/docker-compose.template.yml"
COMPOSE_DEPLOY="${CURR_FOLDER}/docker-compose-${OPT}.yml"
envsubst < $COMPOSE_TEMPLATE > $COMPOSE_DEPLOY

# Sync
rsync -avzlh --rsync-path="mkdir -p ${DEPLOY_FOLDER}; /usr/bin/rsync" -e ssh -r --delete --include-from $CURR_FOLDER/.rsync-include --exclude-from $CURR_FOLDER/.rsync-exclude $CURR_FOLDER/. $USER@$SERVER:$DEPLOY_FOLDER > $CURR_FOLDER/.rsync.log
test $? -ne 0 && abort "Rsync fail" || ok "Rsync done"

# Run
ssh -T $USER@$SERVER <<EOF
sudo -i
cd $DEPLOY_FOLDER
/usr/bin/docker stack deploy --with-registry-auth --prune --compose-file docker-compose-${OPT}.yml ${DOCKER_STACK_NAME}_${OPT}
exit 0
EOF

ok 'Yeahh!!'
exit 0
